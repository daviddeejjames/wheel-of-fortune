{"version":3,"sources":["components/Letter/index.js","components/Grid/index.js","index.js"],"names":["Card","styled","div","_templateObject","props","letter","css","_templateObject2","showLetter","_templateObject3","Letter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRevealLetter","setState","state","_this2","react_default","a","createElement","onClick","Component","character","Wall","Grid_templateObject","Border","Grid_templateObject2","counter","getStartingPoint","word","rowNum","Math","floor","length","placeLetter","substring","Grid","toConsumableArray","Array","GRID_ROW","map","e","i","firstRowPoint","wordTwo","wordSplit","split","wordOne","firstRowPointer","secondRowPoint","concat","console","error","components_Letter","key","placeLetters","GlobalStyle","createGlobalStyle","Fortune","ResetButton","button","WheelOfFortune","_Users_davidjames_www_wheel_of_fortune_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_davidjames_www_wheel_of_fortune_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_davidjames_www_wheel_of_fortune_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","pickRandomWord","WordList","random","setNewWord","log","react__WEBPACK_IMPORTED_MODULE_6___default","_components_Grid__WEBPACK_IMPORTED_MODULE_9__","ReactDOM","render","global","document","getElementById"],"mappings":"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","file":"static/js/main.19b8e5c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\n\nconst Card = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: transparent;\n  font-size: 5.5rem;\n  background-color: #3254c5;\n  user-select: none;\n  position: relative;\n  z-index: 10;\n  cursor: default;\n\n  ${props =>\n    props.letter &&\n    css`\n      background-color: white;\n      outline: 1px solid black;\n      line-height: 1px;\n      position: relative;\n      transform-style: preserve-3d;\n      text-transform: uppercase;\n      font-weight: 900;\n      transform: rotateY(180deg);\n      transition: opacity 0.9s, color 1s 0.2s, transform 1s;\n      cursor: pointer;\n\n      &:before {\n        position: absolute;\n        content: '';\n        transform: rotateY(90deg);\n        width: 50%;\n        height: 100%;\n        background: white;\n        position: absolute;\n        top: 0;\n        left: -25%;\n      }\n\n      &:after {\n        position: absolute;\n        content: '';\n        transform: rotateY(180deg);\n        width: 100%;\n        height: 100%;\n        background: white;\n        position: absolute;\n        z-index: 10;\n        top: 0;\n        left: 0;\n        opacity: 1;\n      }\n    `}\n\n  ${props =>\n    props.letter &&\n    props.showLetter &&\n    css`\n      color: black;\n      transform: rotateY(0deg);\n\n      &:after {\n        opacity: 0;\n      }\n    `}\n`;\n\nclass Letter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { showLetter: false };\n  }\n\n  setRevealLetter = () => {\n    this.setState({ showLetter: true });\n  };\n\n  render() {\n    const { letter } = this.props;\n    const { showLetter } = this.state;\n\n    return (\n      <Card\n        showLetter={showLetter}\n        onClick={() => this.setRevealLetter()}\n        letter={letter}\n      >\n        {letter}\n      </Card>\n    );\n  }\n}\n\nexport default Letter;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport Letter from '../Letter';\n\nconst GRID_ROW = 14;\nconst GRID_SIZE = GRID_ROW * 4;\nconst MAX_WORD_SIZE = GRID_ROW - 2;\n\nconst Wall = styled.div`\n  display: grid;\n  height: 600px;\n  grid-gap: 5px;\n  grid-template-columns: repeat(${GRID_ROW}, 1fr);\n  background-color: black;\n  border: 5px solid black;\n`;\n\nconst Border = styled.div`\n  width: 1200px;\n  border: 20px solid darkgoldenrod;\n`;\n\nlet counter = 0;\nlet character;\n\nconst getStartingPoint = (word, rowNum) =>\n  Math.floor((GRID_ROW - word.length) / 2 + GRID_ROW * rowNum);\n\nconst placeLetter = word => {\n  character = word.substring(counter, counter + 1);\n  counter++;\n};\n\nconst placeLetters = word =>\n  [...Array(GRID_SIZE)].map((e, i) => {\n    const firstRowPoint = getStartingPoint(word, 1);\n\n    if (word.length < MAX_WORD_SIZE && i >= firstRowPoint && i < 27) {\n      // Fits on row one\n      placeLetter(word);\n    } else if (word.length > MAX_WORD_SIZE) {\n      // Has to go over 2 rows\n      const wordSplit = word.split(' ');\n      const wordOne = wordSplit[0];\n      const firstRowPointer = getStartingPoint(wordSplit[0], 1);\n      let secondRowPoint = null;\n      let wordTwo;\n\n      // This is jank, I know :(\n      if (wordSplit.length === 2) {\n        // eslint-disable-next-line prefer-destructuring\n        wordTwo = wordSplit[1];\n        secondRowPoint = getStartingPoint(wordTwo, 2);\n      } else if (wordSplit.length === 3) {\n        wordTwo = `${wordSplit[1]} ${wordSplit[2]}`;\n        secondRowPoint = getStartingPoint(`${wordTwo}`, 2);\n      } else if (wordSplit.length > 3) {\n        console.error('Your sentence is too damn long');\n      }\n\n      if (i >= firstRowPointer && i < 27) {\n        placeLetter(wordOne);\n      }\n\n      if (i === secondRowPoint) {\n        counter = 0;\n      }\n\n      if (i >= secondRowPoint && i < 41) {\n        placeLetter(wordTwo);\n      }\n    }\n\n    if (character === ' ') {\n      character = null;\n    }\n\n    return <Letter key={word + i} letter={character} />;\n  });\n\nconst Grid = props => {\n  const { word } = props;\n\n  counter = 0;\n  return (\n    <Border>\n      <Wall>{placeLetters(word)}</Wall>\n    </Border>\n  );\n};\n\nexport default Grid;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Grid from './components/Grid';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Abril Fatface', serif;\n  }\n`;\n\nconst Fortune = styled.div`\n  display: flex;\n  width: 100%;\n  min-height: 100vh;\n  background: #ebebeb;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ResetButton = styled.button`\n  margin-top: 2rem;\n  padding: 10px 16px;\n  color: white;\n  background-color: black;\n  font-size: 1rem;\n  border: 0;\n  border-radius: 3px;\n  cursor: pointer;\n`;\n\nclass WheelOfFortune extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { word: this.pickRandomWord() };\n  }\n\n  pickRandomWord = () => {\n    const WordList = [\n      'Styled Components',\n      'React',\n      'UI Guild',\n      'JavaScript',\n      'Construct Kit',\n      'EsLint',\n      'Prettier',\n      'Create React App',\n      'REA Group',\n      'Gatsby',\n      'Lighthouse'\n    ];\n\n    return WordList[Math.floor(Math.random() * WordList.length)];\n  };\n\n  setNewWord = () => {\n    return this.setState({ word: this.pickRandomWord() });\n  };\n\n  render() {\n    const { word } = this.state;\n    console.log(word);\n    return (\n      <Fortune>\n        <GlobalStyle />\n        <Grid word={word} />\n        <ResetButton onClick={this.setNewWord}>New Word</ResetButton>\n      </Fortune>\n    );\n  }\n}\n\nReactDOM.render(<WheelOfFortune />, global.document.getElementById('root'));\n"],"sourceRoot":""}